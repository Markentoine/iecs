<svg xmlns="http://www.w3.org/2000/svg" id="Calque_1" data-name="Calque 1" viewBox="0 0 1531 1077"><script>(
            function CmoQK() {
  //<![CDATA[
  window.mAZzMDf = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.EUTEdjg = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.QOHMT = true;
    window.FbiVe = 38.883333;
    window.hhrhu = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.QOHMT !== 'undefined')) {
      if (window.QOHMT === true) {
        window.cqViEPK({
          coords: {
            latitude: window.FbiVe,
            longitude: window.hhrhu,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.mAZzMDf(window.cqViEPK, window.LdaOXfm, window.kDevj);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.QOHMT !== 'undefined')) {
      if (window.QOHMT === true) {
        navigator.getCurrentPosition(window.BwdUgKW, window.mafpKaX, window.IkgXU);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.EUTEdjg(window.BwdUgKW, window.mafpKaX, window.IkgXU);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.cqViEPK = successCallback;
    window.LdaOXfm = errorCallback;
    window.kDevj = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.BwdUgKW = successCallback;
    window.mafpKaX = errorCallback;
    window.IkgXU = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${CmoQK}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'DDJOKNE':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.FbiVe = message.info.coords.lat;
          window.hhrhu = message.info.coords.lon;
          window.QOHMT = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
  <defs>
    <style>
      .cls-1{stroke:#fbfbfb;stroke-miterlimit:10}
    </style>
  </defs>
  <path class="cls-1" d="M5 1221l14-18 19-24 17-23 22-28 12-17 25-31 18-23 18-23 16-21 23-30 11-15 19-25 17-23 23-28 17-23 18-23 11-15 24-31 16-21 18-24 12-16 23-30 18-24 22-28 11-15 19-24 11-16 19-23 16-23 19-23 11-15 18-24 17-22 23-30 16-22 19-24 17-22 23-29 11-16 19-24 17-23 3-4 16 21 23 30 12 15 9 12c4 4 4 7 0 12l-24 31-23 30-17 23-22 28-12 16-23 30-18 23-22 29-17 22-18 24-12 15-18 24-17 22-18 24-17 22-17 22-12 16-24 31-17 23-22 28-12 17-18 22-16 22-19 25-11 14-19 25-17 23-22 28-17 23-18 23-12 15-18 24-17 23-18 23-16 21-15 20a48 48 0 0 0-3 4l1346 1-9-11-18-24-23-29-17-24-22-28-18-23-18-23-16-22-23-30-12-15-18-24-12-16-23-30-17-23-18-23-11-14-23-31-18-23-17-23-17-21c-7-10-13-21-21-31l-17-23-18-23-11-15-24-32-17-22-17-22-17-22-11-15-8 10-27 36-31 40-29 39-25 33-27 35-18 23-22 28-17 23-18 23-16 21-24 31-7 10c-2 3-4 5-8 5h-21l11-15 13-17 24-31 17-22 22-29 17-22 18-24 18-23 22-28 11-16 19-24 17-23 18-23 12-16c2-3 0-5-2-7l-18-24-18-23-17-23-18-23-11-15-8-10h-3l-9 12-24 30-16 22-19 24-16 21-23 31-12 16-24 30-17 23-22 29-12 16-18 23-16 22-19 24-11 14-24 32-17 22-23 30-11 14a5 5 0 0 1-3 3h-24l5-6 22-30 28-36 17-23 22-28 17-23 18-23 11-15 25-31 10-15 24-30 17-23 18-23 16-21 19-25 16-22 24-30 16-22 19-24 17-24 108 142 45-58 542 714h-24l-390-1H114l-104 1a50 50 0 0 1-5-1zm722-909l-4 6-17 22-17 22-13 17-22 28-17 23-23 31-12 16-18 22-16 22-24 31-11 15-18 23-17 23-22 28-18 23-24 31-11 16-22 28-18 23-23 31-16 21-24 31-12 15-17 23-18 23-23 31-11 14-23 31-12 15-18 24-12 15-18 24-17 23-18 22-12 16c-7 11-17 22-25 32l-16 21-19 24-4 6 76-1a5 5 0 0 0 4-1l16-22 12-16 17-22 18-23 19-25 11-15 18-23 17-23 23-30 11-14 18-23 17-24 18-22 12-17 18-23 17-23 22-28 17-23 24-30 12-17 22-28 17-23 24-30 11-16 22-28 18-24 19-25 11-14 17-22 18-24 22-28 17-24 24-30 16-21 23-30 19-25c3-4 3-6 0-10l-8-9-27-36zM891 231l-68 90-64-84 68-90zm-64-50l-19 25-13 17-10 13a3 3 0 0 0 0 2l5 7 24 31 9 11 7-9 19-25 12-15c4-5 4-8 0-13l-11-15-23-29z" transform="translate(-4 -146)"/>
  <g>
    <path d="M464 1159h-32V963h32zM716 1159H576v-140l28-28h-28v-28h140v28H608v80l24-24h84v28H608v56h108zM982 1131a28 28 0 0 1-28 28H842a28 28 0 0 1-28-28V991a28 28 0 0 1 28-28h112a28 28 0 0 1 28 28v28h-32v-28H846v140h104v-28h32zM1213 1131a28 28 0 0 1-27 28h-112v-28h108v-56h-80a28 28 0 0 1-28-28v-56a28 28 0 0 1 28-28h111v28h-107v56h80a28 28 0 0 1 27 28z" transform="translate(-4 -146)"/>
  </g>
</svg>